// 1021. 删除最外层的括号

























// 审题，分析
// 有效括号字符串 的意思是指 左右括号一定是配对的？；好像是这意思

eg1.输入字符串为 (()())(())

原语化分解得到 "(()())" + "(())"

删除每个部分中的最外层括号后得到 "()()" + "()" = "()()()"





eg2,输入字符串为 (()())(())(()(()))

1.拆完：(()())	 (())	(()(()))


2.删完：()()	()		()(())


删除最外层括号，每组只删一次，
必须要删除一次最外层括号；

1.实现流程：
	1. 先拆分，
	2. 再删除各小组最外层括号

2.特殊注意的情况：
	如下这种情况，删除一次最外层括号，就删没了，输出为空；

	输入："()()"
	输出：""
	解释：
	输入字符串为 "()()"，原语化分解得到 "()" + "()"，
	删除每个部分中的最外层括号后得到 "" + "" = ""。


/* 伪代码实现 */
// 1. 拆，怎么拆？
// 找到最外层括号匹配，匹配上了，就算拆分了一个出来。
// 如何实现？用什么算法？实现方案？




// 2.删，怎么删？
// 找到最外层括号，删掉；
// 如何找到和删掉，如何实现？用什么算法实现？实现方案？

// 网友题解分析：
// 本题的关键在于如何判断 哪些括号 是 最外层括号 。
// 只要能够判断哪些是最外层括号，题目就可以迎刃而解。

// "(()())" + "(())"
// 思路如何实现？？伪代码？


// 有效括号字符串”包含的意思有： 左右括号一定是配对存在；

/*
* 1.解法：遍历计数
*   
* 2.复杂度分析:
*   时间：O(n)
*   空间：O(n)
*
*  “有效括号字符串”包含的意思有： 左右括号一定是配对存在；
*/ 

class Solution {
    public String removeOuterParentheses(String S) {

        StringBuilder sb = new StringBuilder();
		int level = 0;
		
		// 遍历 有效括号字符串 
        for (char c : S.toCharArray()) {

			// 1.遇到右括号，减一
			if (c == ')') --level;
			
			// 2.剔除掉每个原语的最外层括号
			//   保留原语的内层括号（将其存储到buffer，最后输出 buffer) 
			// 	 level == 0，表示当前是最外层右括号
			//   level >0 表示当前都是内层括号，要入
			if (level >= 1) sb.append(c);
			
			// 3.遇到左括号，加一			
			if (c == '(') ++level;
			
		}
		
		// 输出 结果buffer
        return sb.toString();、
    }

}

