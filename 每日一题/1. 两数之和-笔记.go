



// 1.审题，分析
1.1.输入：
	1.一个整数数组 nums
	2.一个整数目标值 target


1.2.输出：
	1.在nums中找出和为target的那两个整数，并返回它们的数组下标(result)


1.3.理解举的例子：
	示例 1：
	输入：nums = [2,7,11,15], target = 9
	输出：[0,1]
	解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。


1.4.注意:
	1.每种输入只会对应一个答案(输出)，
	  其意思是：只有一个结果，找到了func就立刻返回；



// 1.我个人的解题思路：
// 用哈希表 存num；然后遍历数组num，用target-num[i]的值来查找哈希表，找到就返回结果
// 时间O(n)； n为数组元素个数，最差情况：遍历完数组中所有元素；对于每个元素，查找时间为O(1)(哈希表的好处)
// 空间O(n)； n为数组元素个数，哈希空间开销最大为O(n)；

// 2.官方解题思路是：遍历数组，边查边存；查到了就返回，查不到就将当前元素存入哈希，接着查下一个






// 国内 官网
// 哈希表来存储和查询；
// 边查边存



/* 
* 1.题目需求：
*	输入：一个整数数组nums，一个整数目标值target；
*	输出：在nums中找出 和为target的那两个整数，返回它们的数组下标；
*
*	附加条件：只会存在一个有效答案；找到这个答案，func就立刻返回。
*
* 2.解法：哈希表
*
* 3.解题思路： 
*	3.1. 用哈希表来存储和查找(元素值为key，元素下标为value)，
*	3.2. 遍历数组，边查边存：查到了，func返回；没查到，将当前元素和下标存入哈希；接着查下一个元素；
*	3.3. 用target-nums[i]的方式来查；
*
* 4.复杂度分析:
*   时间：O(n)，n为数组元素个数，最差情况：遍历完数组中所有元素；对于每个元素，查找时间为O(1)(哈希表的好处)
*   空间：O(n)，n为数组元素个数，哈希空间开销最大为O(n)；
*
*/
func twoSum(nums []int, target int) []int {
	
	hashTable := map[int]int{}
	
	// 遍历数组，查找哈希map，边查边存；查到了立刻返回；
    for i, x := range nums {
        if p, ok := hashTable[target-x]; ok {
			// 查到了，func返回
            return []int{p, i}
		}
		// 没查到，将当前元素存入哈希；
        hashTable[x] = i
    }
    return nil
}
